///
Start : 
Changed :
Result :
///

2024-11-21

Standard of Fill Value : 0.1f

{
S : 0.38fps
C : 프로젝트 속성 > C/C++ > 최적화 > 최대 최적화(속도 우선)(/O2)
R : 0.96fps
}

{
S : 0.96fps
C : 프로젝트 속성 > 고급 > 디버그 라이브러리 사용
R : 19.38fps
}

Standard of Fill Value : 0.2f

{
S : 0.8fps
C : C/C++ > 고급 > 호출규칙 _cdecl -> fastCall
R : 0.79fps
}

{
S : 0.8fps
C : particles > list 자료형에서 vector로 전환
R : 250~300fps
}

Standard of Fill Value : 0.5f

{
S : 5fps
C : FluidNeighborRecord * 를 vector<FluidNeighborRecord>로 전환 + memspy로 자료 크기를
바꾸던 것을 vector의 resize 함수로 바꿈
R : 5.5fps
}

// 갈아 엎음

Standard of Fill Value : 0.5f

{
C : 
프로젝트 속성 > C/C++ > 최적화 > 최대 최적화(속도 우선)(/O2)
particles > list 자료형에서 vector로 전환
particle_at > 인덱스로 바로 찾도록 바꿈
R : 140fps
}

Standard of Fill Value : 1.f

{
S : 31.98f
C : UpdateGrid() 부분 코드 최적화 및 병렬 구조로 실행
R : 29~30f > 별 차이 없음
}

{
S : 30.f
C : GetNeighbors() 4중 for문 부분 코드 최적화
R : 30.f > 별 차이 없음
}

{
S : 30.f
C : 
std::vector<FluidNeighborRecord> neighbors; 와 같이 변경 후 ExpandNeighbors() 부분 resize()함수로 대체
R : 40~50.f > 초반 실행 속도 향상 및 평균 속도 향상
}

2024-11-22

Standard of Fill Value : 1.f

Standard of Step : 600

{
S : 26~27.f
C : 
프로젝트 속성에서 C / C++ > 부동 소수점 모델 > fast 및 예외 처리 안함
프로젝트 속성에서 C / C++ > 부동 소수점 예외 사용 > 사용 안함
R : 29.f > 초반 실행 속도 향상 및 평균 속도 향상
}

{
S : 29.f
C : 
std::vector<Particle*> 대신 std::vector<Particle>를 사용하여 데이터가 연속적으로 저장되도록 하면 캐시 효율성이 증가할것으로 예상
R : 32.f > 초반 실행 속도 향상 및 평균 속도 향상
}


